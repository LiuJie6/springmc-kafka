<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <context:component-scan base-package="com.template.model"/>
    <context:component-scan base-package="com.template.dao"/>
    <context:component-scan base-package="com.template.service"/>

    <task:scheduler id="scheduler" pool-size="11"/>
    <task:annotation-driven scheduler="scheduler"/>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:log4j.properties</value>
                <value>classpath:kafka-consumer.properties</value>
                <value>classpath:kafka-producer.properties</value>
            </list>
        </property>
    </bean>

    <!--kafka配置开始-->
    <bean id="producerProperties" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <!--kafka服务地址，可能是集群-->
                <entry key="bootstrap.servers" value="${producer.bootstrap.servers}"/>
                <entry key="acks" value="${producer.acks}"/>
                <!--消息重发次数，默认为3-->
                <entry key="retries" value="${producer.retries}"/>
                <!--每次发送消息的数量-->
                <entry key="batch.size" value="${producer.batch.size}"/>
                <entry key="linger.ms" value="${producer.linger.ms}"/>
                <!--producer用来缓存数据的内存大小-->
                <entry key="buffer.memory" value="${producer.buffer.memory}"/>
                <entry key="key.serializer" value="${producer.key.serializer}"/>
                <entry key="value.serializer" value="${producer.value.serializer}"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="consumerProperties" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <entry key="bootstrap.servers" value="${consumer.bootstrap.servers}"/>
                <entry key="group.id" value="${consumer.group.id}"/>
                <entry key="auto.offset.reset" value="${consumer.auto.offset.reset}"/>
                <entry key="enable.auto.commit" value="${consumer.enable.auto.commit}"/>
                <entry key="auto.commit.interval.ms" value="${consumer.auto.commit.interval.ms}"/>
                <entry key="session.timeout.ms" value="${consumer.session.timeout.ms}"/>
                <entry key="key.deserializer" value="${consumer.key.deserializer}"/>
                <entry key="value.deserializer" value="${consumer.value.deserializer}"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="producerFactory"
          class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
        <constructor-arg ref="producerProperties"/>
    </bean>

    <bean id="kafkaTemplate"
          class="org.springframework.kafka.core.KafkaTemplate">
        <constructor-arg ref="producerFactory"/>
        <constructor-arg name="autoFlush" value="true"/>
        <property name="defaultTopic" value="${producer.topic}"/>
        <!--<property name="producerListener" ref="producerListener"/>-->
    </bean>

    <bean id="consumerFactory"
          class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
        <constructor-arg ref="consumerProperties"/>
    </bean>

    <bean id="containerProperties"
          class="org.springframework.kafka.listener.config.ContainerProperties">
        <constructor-arg value="${consumer.topic}"/>
        <property name="messageListener" ref="kafkaConsumerServer"/>
    </bean>

    <bean id="messageListenerContainerTrade"
          class="org.springframework.kafka.listener.KafkaMessageListenerContainer"
          init-method="doStart">
        <constructor-arg ref="consumerFactory"/>
        <constructor-arg ref="containerProperties"/>
    </bean>
    <!--kafka配置结束-->

    <!--    <bean id="mysql-DS"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${mysql.driver}"/>
            <property name="url" value="${mysql.url}"/>
            <property name="username" value="${mysql.username}"/>
            <property name="password" value="${mysql.password}"/>
        </bean>-->
    <bean id="mysql-DS"
          class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
        <property name="jdbcUrl" value="${mysql.url}"/>
        <property name="driverClass" value="${mysql.driver}"/>

        <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}"/>
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"/>
        <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
        <property name="checkoutTimeout" value="${checkoutTimeout}"/>
        <property name="unreturnedConnectionTimeout" value="${unreturnedConnectionTimeout}"/>
        <property name="debugUnreturnedConnectionStackTraces" value="${debugUnreturnedConnectionStackTraces}"/>

        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="maxIdleTime" value="${maxIdleTime}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        <property name="acquireIncrement" value="${acquireIncrement}"/>
        <property name="maxStatements" value="${maxStatements}"/>
        <property name="maxStatementsPerConnection" value="${maxStatementsPerConnection}"/>

    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="mysql-DS"/>
        <property name="packagesToScan">
            <list>
                <value>com.template.model</value>
            </list>
        </property>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="hibernateProperties">
            <props>
                <!--MySQLInnoDBDialect 支持mysql5.0以下版本-->
                <!--MySQL57InnoDBDialect 支持mysql5.0以上版本-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL57InnoDBDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
            </props>
        </property>
    </bean>

    <!-- transaction configuration-->
    <tx:annotation-driven/>
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
</beans>